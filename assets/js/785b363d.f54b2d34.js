"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[81],{7230:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>r,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var a=t(4848),i=t(8453);const o={title:"Domain"},s=void 0,c={id:"tutorial/domain",title:"Domain",description:"Untuk memulai, pertama-tama kita perlu desain domain-nya. Komponen utama domain",source:"@site/docs/03-tutorial/01-domain.md",sourceDirName:"03-tutorial",slug:"/tutorial/domain",permalink:"/doksli/docs/tutorial/domain",draft:!1,unlisted:!1,editUrl:"https://github.com/rekalogika/doksli/edit/main/docs/03-tutorial/01-domain.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Domain"},sidebar:"tutorialSidebar",previous:{title:"Tutorial",permalink:"/doksli/docs/tutorial/"}},r={},l=[{value:"Entity <code>Post</code>",id:"entity-post",level:2},{value:"Entity <code>Comment</code>",id:"entity-comment",level:2},{value:"Relasi Pada Sisi <code>Post</code>",id:"relasi-pada-sisi-post",level:2},{value:"Relasi Pada Sisi <code>Comment</code>",id:"relasi-pada-sisi-comment",level:2}];function d(n){const e={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.p,{children:"Untuk memulai, pertama-tama kita perlu desain domain-nya. Komponen utama domain\nadalah entity dan value object. Bedanya, entity memiliki state, dan biasanya\nakan disimpan di database. Sedangkan value object tidak memiliki state."}),"\n",(0,a.jsx)(e.admonition,{type:"caution",children:(0,a.jsx)(e.p,{children:"Pada tahap ini kita tidak perlu memikirkan teknologi yang digunakan, seperti\ndatabase dan sebagainya. Kita hanya perlu fokus pada model bisnisnya saja."})}),"\n",(0,a.jsxs)(e.h2,{id:"entity-post",children:["Entity ",(0,a.jsx)(e.code,{children:"Post"})]}),"\n",(0,a.jsxs)(e.p,{children:["Berikut contoh entity untuk ",(0,a.jsx)(e.code,{children:"Post"}),":"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-php",children:"namespace App\\Domain;\n\nuse Rekalogika\\CommonBundle\\Domain\\Entity\\AbstractAggregateRoot;\nuse Symfony\\Component\\Clock\\DatePoint;\n\nclass Post extends AbstractAggregateRoot\n{\n    private \\DateTimeInterface $createdTime;\n    private string $title;\n    private string $content;\n\n    public function __construct(\n        string $title,\n        string $content,\n    ) {\n        $this->title = $title;\n        $this->createdTime = new DatePoint();\n    }\n}\n"})}),"\n",(0,a.jsxs)(e.p,{children:["Terlihat bahwa class ini sudah bisa mewakili fungsi dasar dari blog post. Setiap\nblog post memiliki judul, konten, dan waktu pembuatan. Waktu pembuatan otomatis\ndibuat saat objek dibuat. Sedangkan terlihat ",(0,a.jsx)(e.code,{children:"title"})," dan ",(0,a.jsx)(e.code,{children:"content"})," adalah\nproperty yang wajib ada (tidak boleh kosong), dan harus ada saat objek pertama\nkali dibuat."]}),"\n",(0,a.jsx)(e.admonition,{type:"info",children:(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.code,{children:"DateTimeInterface"})," adalah interface dari semua objek waktu di PHP.\nImplementasi di PHP berupa ",(0,a.jsx)(e.code,{children:"DateTimeImmutable"})," dan ",(0,a.jsx)(e.code,{children:"DateTime"}),". Di sini kita\nmenggunakan ",(0,a.jsx)(e.code,{children:"DatePoint"})," dari Symfony Clock. Alasannya karena ",(0,a.jsx)(e.code,{children:"DatePoint"})," lebih\nmudah diuji daripada ",(0,a.jsx)(e.code,{children:"DateTimeImmutable"})," dan ",(0,a.jsx)(e.code,{children:"DateTime"}),"."]})}),"\n",(0,a.jsxs)(e.p,{children:["Properti ",(0,a.jsx)(e.code,{children:"createdTime"})," tidak boleh diubah setelah, hanya bisa dilihat, maka kita\njadikan ",(0,a.jsx)(e.code,{children:"readonly"})," dan hanya kita buatkan getternya, tidak perlu setter:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-php",children:"class Post extends AbstractAggregateRoot\n{\n    private readonly \\DateTimeInterface $createdTime;\n\n    public function getCreatedTime(): \\DateTimeInterface\n    {\n        return $this->createdTime;\n    }\n}\n"})}),"\n",(0,a.jsx)(e.admonition,{type:"info",children:(0,a.jsxs)(e.p,{children:["Objek ",(0,a.jsx)(e.code,{children:"DateTimeInterface"})," adalah salah satu contoh dari value object."]})}),"\n",(0,a.jsxs)(e.p,{children:["Karena ",(0,a.jsx)(e.code,{children:"title"})," dan ",(0,a.jsx)(e.code,{children:"content"})," boleh diubah setelah pos dibuat, maka kita buatkan\ngetter dan setternya:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-php",children:"class Post extends AbstractAggregateRoot\n{\n    public function getTitle(): string\n    {\n        return $this->title;\n    }\n\n    public function setTitle(string $title): void\n    {\n        $this->title = $title;\n    }\n\n    public function getContent(): string\n    {\n        return $this->content;\n    }\n\n    public function setContent(string $content): void\n    {\n        $this->content = $content;\n    }\n}\n"})}),"\n",(0,a.jsxs)(e.h2,{id:"entity-comment",children:["Entity ",(0,a.jsx)(e.code,{children:"Comment"})]}),"\n",(0,a.jsx)(e.p,{children:"Karena setiap pos bisa memiliki komentar, maka kita buat entity komentar:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-php",children:"namespace App\\Domain;\n\nuse Rekalogika\\CommonBundle\\Domain\\Entity\\AbstractEntity;\nuse Symfony\\Component\\Clock\\DatePoint;\n\nclass Comment extends AbstractEntity\n{\n    private string $content;\n    private readonly \\DateTimeInterface $createdTime;\n\n    public function __construct(string $content)\n    {\n        $this->content = $content;\n        $this->createdTime = new DatePoint();\n    }\n\n    public function getCreatedTime(): \\DateTimeInterface\n    {\n        return $this->createdTime;\n    }\n}\n"})}),"\n",(0,a.jsxs)(e.p,{children:["Kurang lebih sama perilakunya dengan ",(0,a.jsx)(e.code,{children:"Post"}),". Komentar memiliki konten dan waktu."]}),"\n",(0,a.jsxs)(e.h2,{id:"relasi-pada-sisi-post",children:["Relasi Pada Sisi ",(0,a.jsx)(e.code,{children:"Post"})]}),"\n",(0,a.jsxs)(e.p,{children:["Karena setiap pos bisa memiliki beberapa komentar, maka kita perlu membuat\nrelasinya. Kita bisa membuat property ",(0,a.jsx)(e.code,{children:"comments"})," di ",(0,a.jsx)(e.code,{children:"Post"}),":"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-php",children:"use Doctrine\\Common\\Collections\\Collection;\nuse Rekalogika\\Contracts\\Collections\\Recollection;\nuse Rekalogika\\Domain\\Collections\\ArrayCollection;\nuse Rekalogika\\Domain\\Collections\\RecollectionDecorator;\n\nclass Post extends AbstractAggregateRoot\n{\n    /**\n     * @var Collection<string,Comment>\n     */\n    private Collection $comments;\n\n    public function __construct(\n        // ...\n    ) {\n        // ...\n        $this->comments = new ArrayCollection();\n    }\n\n    public function addComment(Comment $comment): void\n    {\n        $this->getComments()->add($comment);\n        $comment->setPost($this);\n    }\n\n    /**\n     * @return Recollection<string,Comment>\n     */\n    public function getComments(): Recollection\n    {\n        return RecollectionDecorator::create(\n            collection: $this->insurables,\n            count: new PrecountingStrategy($this->insurablesCount),\n            indexBy: 'id',\n            orderBy: ['id' => Order::Descending]\n        );\n    }\n\n    public function removeComment(Comment $comment): void\n    {\n        if ($this->getComments()->removeElement($comment)) {\n            if ($comment->getPost() === $this) {\n                $comment->setPost(null);\n            }\n        }\n    }\n}\n"})}),"\n",(0,a.jsx)(e.p,{children:"Yang perlu diperhatikan:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["Untuk menampung komentar, harus menggunakan tipe ",(0,a.jsx)(e.code,{children:"Collection"}),", tidak boleh\narray biasa."]}),"\n",(0,a.jsxs)(e.li,{children:["Di atasnya kita tambahkan ",(0,a.jsx)(e.code,{children:"@var Collection<string,Comment>"})," untuk memberi tahu\nbahwa ",(0,a.jsx)(e.code,{children:"comments"})," adalah collection dari beberapa objek ",(0,a.jsx)(e.code,{children:"Comment"})," dengan key\nbertipe ",(0,a.jsx)(e.code,{children:"string"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(e.admonition,{title:"Perbedaan Dengan Symfony dan Doctrine Standard",type:"info",children:[(0,a.jsxs)(e.p,{children:["Kita menggunakan ",(0,a.jsx)(e.code,{children:"ArrayCollection"})," versi kita, bukan yang dari Doctrine,\n",(0,a.jsx)(e.a,{href:"https://rekalogika.dev/collections/implementations/array-collection",children:"penjelasannya di\nsini"}),"."]}),(0,a.jsxs)(e.p,{children:["Untuk ",(0,a.jsx)(e.code,{children:"getComments()"}),", kita menggunakan ",(0,a.jsx)(e.code,{children:"RecollectionDecorator"}),", bukan plain\n",(0,a.jsx)(e.code,{children:"Collection"}),". Alasannya:"]}),(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["Mengimplementasikan ",(0,a.jsx)(e.code,{children:"PageableInterface"})," yang bisa digunakan langsung untuk\nbatch processing dan pagination"]}),"\n",(0,a.jsx)(e.li,{children:"Otomatis melakukan limit, sehingga tidak akan menghabiskan memori."}),"\n"]}),(0,a.jsxs)(e.p,{children:["Cek infonya ",(0,a.jsx)(e.a,{href:"https://rekalogika.dev/collections",children:"di sini"}),"."]}),(0,a.jsxs)(e.p,{children:["Yang mengakses ",(0,a.jsx)(e.code,{children:"$this->comments"})," hanyalah method ",(0,a.jsx)(e.code,{children:"getComments()"}),". Method lain\nharus menggunakan method ",(0,a.jsx)(e.code,{children:"getComments()"})," untuk mengakses data komentar. Ini kita\nlakukan untuk menghindari kesalahan pemrograman yang dapat mengakibatkan\nout-of-memory."]})]}),"\n",(0,a.jsxs)(e.h2,{id:"relasi-pada-sisi-comment",children:["Relasi Pada Sisi ",(0,a.jsx)(e.code,{children:"Comment"})]}),"\n",(0,a.jsxs)(e.p,{children:["Lalu untuk ",(0,a.jsx)(e.code,{children:"Comment"}),", kita bisa menambahkan property ",(0,a.jsx)(e.code,{children:"post"}),":"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-php",children:"class Comment extends AbstractEntity\n{\n    private ?Post $post = null;\n\n    public function setPost(?Post $post): void\n    {\n        $this->post = $post;\n    }\n\n    public function getPost(): Post\n    {\n        return $this->post;\n    }\n}\n"})}),"\n",(0,a.jsxs)(e.p,{children:["Jika ",(0,a.jsx)(e.code,{children:"$post"})," null, maka komentar tersebut tidak terhubung dengan pos manapun."]})]})}function m(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>c});var a=t(6540);const i={},o=a.createContext(i);function s(n){const e=a.useContext(o);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),a.createElement(o.Provider,{value:e},n.children)}}}]);