"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[83],{6333:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>p,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var t=n(4848),s=n(8453);const o={title:"Bekerja Dengan Entity"},i=void 0,r={id:"tutorial/bekerja",title:"Bekerja Dengan Entity",description:"Setelah membuat domain, mapping database, dan repositorynya, kita sudah bisa",source:"@site/docs/03-tutorial/06-bekerja.md",sourceDirName:"03-tutorial",slug:"/tutorial/bekerja",permalink:"/doksli/docs/tutorial/bekerja",draft:!1,unlisted:!1,editUrl:"https://github.com/rekalogika/doksli/edit/main/docs/03-tutorial/06-bekerja.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Bekerja Dengan Entity"},sidebar:"tutorialSidebar",previous:{title:"Repository",permalink:"/doksli/docs/tutorial/repository"}},p={},d=[{value:"Membuat <code>Post</code> Baru dan Menyimpannya ke Database",id:"membuat-post-baru-dan-menyimpannya-ke-database",level:2},{value:"Mengambil <code>Post</code> dari Database",id:"mengambil-post-dari-database",level:2},{value:"Mengubah <code>Post</code> dan Menyimpannya ke Database",id:"mengubah-post-dan-menyimpannya-ke-database",level:2},{value:"Menghapus <code>Post</code> dari Database",id:"menghapus-post-dari-database",level:2},{value:"Melakukan Iterasi Terhadap Semua <code>Post</code>",id:"melakukan-iterasi-terhadap-semua-post",level:2}];function c(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.p,{children:"Setelah membuat domain, mapping database, dan repositorynya, kita sudah bisa\nbekerja dengan entity tersebut."}),"\n",(0,t.jsxs)(a.h2,{id:"membuat-post-baru-dan-menyimpannya-ke-database",children:["Membuat ",(0,t.jsx)(a.code,{children:"Post"})," Baru dan Menyimpannya ke Database"]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-php",children:"use App\\Domain\\Entity\\Post;\nuse App\\DomainService\\Repository\\PostRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\n\n/** @var PostRepository $postRepository */\n/** @var EntityManagerInterface $entityManager */\n\n$post = new Post('Title', 'Content');\n$postRepository->add($post);\n$entityManager->flush();\n"})}),"\n",(0,t.jsxs)(a.h2,{id:"mengambil-post-dari-database",children:["Mengambil ",(0,t.jsx)(a.code,{children:"Post"})," dari Database"]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-php",children:"use App\\Domain\\Entity\\Post;\nuse App\\DomainService\\Repository\\PostRepository;\n\n/** @var PostRepository $postRepository */\n\n// $post akan null jika tidak ditemukan di database\n$post = $postRepository->get('91b2679e-47a5-11ef-b06f-8c8caab77b0f');\n\n// akan throw exception jika tidak ditemukan di database, dan otomatis\n// menjadi error 404 di browser\n$post = $postRepository->fetch('91b2679e-47a5-11ef-b06f-8c8caab77b0f');\n"})}),"\n",(0,t.jsxs)(a.h2,{id:"mengubah-post-dan-menyimpannya-ke-database",children:["Mengubah ",(0,t.jsx)(a.code,{children:"Post"})," dan Menyimpannya ke Database"]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-php",children:"use App\\Domain\\Entity\\Post;\nuse App\\DomainService\\Repository\\PostRepository;\n\n/** @var PostRepository $postRepository */\n/** @var EntityManagerInterface $entityManager */\n\n$post = $postRepository->get('91b2679e-47a5-11ef-b06f-8c8caab77b0f');\n$post->setTitle('New Title');\n$post->setContent('New Content');\n$entityManager->flush();\n"})}),"\n",(0,t.jsxs)(a.h2,{id:"menghapus-post-dari-database",children:["Menghapus ",(0,t.jsx)(a.code,{children:"Post"})," dari Database"]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-php",children:"use App\\Domain\\Entity\\Post;\nuse App\\DomainService\\Repository\\PostRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\n\n/** @var PostRepository $postRepository */\n/** @var EntityManagerInterface $entityManager */\n\n// cara pertama\n$post = $postRepository->get('91b2679e-47a5-11ef-b06f-8c8caab77b0f');\n$postRepository->removeElement($post);\n$entityManager->flush();\n\n// cara kedua\n$postRepository->remove('91b2679e-47a5-11ef-b06f-8c8caa77b0f');\n$entityManager->flush();\n"})}),"\n",(0,t.jsxs)(a.h2,{id:"melakukan-iterasi-terhadap-semua-post",children:["Melakukan Iterasi Terhadap Semua ",(0,t.jsx)(a.code,{children:"Post"})]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-php",children:"use App\\DomainService\\Repository\\PostRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\n\n/** @var PostRepository $postRepository */\n/** @var EntityManagerInterface $entityManager */\n\n// cara langsung, akan mengambil semua data dari database sekaligus, dan\n// berpotensi out of memory jika data terlalu banyak:\n\nforeach ($postRepository as $post) {\n    // lakukan sesuatu dengan $post\n}\n\n// menggunakan batch, akan mengambil data per halaman, dan tidak akan\n// mengalami out of memory:\n\nforeach ($postRepository->withItemsPerPage(1000)->getPages() as $page) {\n    foreach ($page as $post) {\n        // lakukan sesuatu dengan $post\n    }\n\n    $entityManager->clear();\n}\n"})})]})}function l(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>i,x:()=>r});var t=n(6540);const s={},o=t.createContext(s);function i(e){const a=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function r(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(o.Provider,{value:a},e.children)}}}]);