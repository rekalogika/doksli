"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[258],{874:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var r=t(4848),s=t(8453);const o={title:"Repository"},i=void 0,a={id:"tutorial/repository",title:"Repository",description:"Repository pattern adalah pola design yang memberikan abstraksi untuk mengakses",source:"@site/docs/03-tutorial/05-repository.md",sourceDirName:"03-tutorial",slug:"/tutorial/repository",permalink:"/doksli/docs/tutorial/repository",draft:!1,unlisted:!1,editUrl:"https://github.com/rekalogika/doksli/edit/main/docs/03-tutorial/05-repository.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Repository"},sidebar:"tutorialSidebar",previous:{title:"Migrations",permalink:"/doksli/docs/tutorial/migrations"},next:{title:"Bekerja Dengan Entity",permalink:"/doksli/docs/tutorial/bekerja"}},p={},c=[{value:"Membuat Interface Repository",id:"membuat-interface-repository",level:2},{value:"Membuat Implementasi Repository",id:"membuat-implementasi-repository",level:2}];function l(e){const n={admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Repository pattern adalah pola design yang memberikan abstraksi untuk mengakses\ndata. Kita menggunakan repository untuk mengambil dan menyimpan data ke dalam\ndatabase."}),"\n",(0,r.jsx)(n.p,{children:"Hal tersebut dilakukan melalui satu pintu. Keluar masuk entity dari dan ke\ndatabase dilakukan hanya melalui repository. Apabila ada perubahan cara\npenyimpanan data, hal tersebut mudah dilakukan karena hanya perlu mengubah\nimplementasi repository."}),"\n",(0,r.jsx)(n.h2,{id:"membuat-interface-repository",children:"Membuat Interface Repository"}),"\n",(0,r.jsx)(n.p,{children:"Pada arsitektur yang kita gunakan, repository berada di layer domain service.\nKarena repository berhubungan dengan infrastruktur, kita hanya akan membuat\ninterfacenya saja di layer domain service:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="src/DomainService/Repository/PostRepository.php"',children:"namespace App\\DomainService\\Repository;\n\nuse App\\Domain\\Entity\\Post;\nuse Rekalogika\\Contracts\\Collections\\Repository;\n\n/**\n * @extends Repository<string,Post>\n */\ninterface PostRepository extends Repository\n{\n}\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["Kita selalu menggunakan string UUID untuk primary key. Dengan demikian, template\n",(0,r.jsx)(n.code,{children:"TKey"})," dalam interface repository selalu berupa ",(0,r.jsx)(n.code,{children:"string"}),"."]})}),"\n",(0,r.jsxs)(n.p,{children:["Sedangkan untuk ",(0,r.jsx)(n.code,{children:"Comment"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="src/DomainService/Repository/CommentRepository.php"',children:"namespace App\\DomainService\\Repository;\n\nuse App\\Domain\\Entity\\Comment;\nuse Rekalogika\\Contracts\\Collections\\Repository;\n\n/**\n * @extends Repository<string,Comment>\n */\ninterface CommentRepository extends Repository\n{\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"membuat-implementasi-repository",children:"Membuat Implementasi Repository"}),"\n",(0,r.jsx)(n.p,{children:"Setelah itu kita buatkan implementasinya."}),"\n",(0,r.jsxs)(n.p,{children:["Untuk ",(0,r.jsx)(n.code,{children:"Post"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="src/Infrastructure/Repository/PostRepository.php"',children:"namespace App\\Infrastructure\\Repository;\n\nuse App\\Domain\\Entity\\Post;\nuse App\\DomainService\\Repository\\PostRepository;\nuse Doctrine\\Common\\Collections\\Order;\nuse Doctrine\\Persistence\\ManagerRegistry;\nuse Rekalogika\\Collections\\ORM\\AbstractRepository;\n\n/**\n * @extends AbstractRepository<string,Post>\n */\nclass PostRepository extends AbstractRepository implements PostRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct(\n            managerRegistry: $registry,\n            class: Post::class,\n            orderBy: ['id' => Order::Descending],\n        );\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Untuk ",(0,r.jsx)(n.code,{children:"Comment"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="src/Infrastructure/Repository/CommentRepository.php"',children:"namespace App\\Infrastructure\\Repository;\n\nuse App\\Domain\\Entity\\Comment;\nuse App\\DomainService\\Repository\\CommentRepository;\nuse Doctrine\\Common\\Collections\\Order;\nuse Doctrine\\Persistence\\ManagerRegistry;\nuse Rekalogika\\Collections\\ORM\\AbstractRepository;\n\n/**\n * @extends AbstractRepository<string,Comment>\n */\nclass CommentRepository extends AbstractRepository implements CommentRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct(\n            managerRegistry: $registry,\n            class: Comment::class,\n            orderBy: ['id' => Order::Descending],\n        );\n    }\n}\n"})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var r=t(6540);const s={},o=r.createContext(s);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);