"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[406],{586:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>p,frontMatter:()=>s,metadata:()=>d,toc:()=>c});var r=i(4848),a=i(8453);const s={title:"Arsitektur"},t=void 0,d={id:"arsitektur/layering",title:"Arsitektur",description:"Aplikasi didesain menggunakan DDD (domain-driven design) dan _onion",source:"@site/docs/02-arsitektur/01-layering.md",sourceDirName:"02-arsitektur",slug:"/arsitektur/layering",permalink:"/doksli/docs/arsitektur/layering",draft:!1,unlisted:!1,editUrl:"https://github.com/rekalogika/doksli/edit/main/docs/02-arsitektur/01-layering.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Arsitektur"},sidebar:"tutorialSidebar",previous:{title:"Arsitektur",permalink:"/doksli/docs/arsitektur/"},next:{title:"Tutorial",permalink:"/doksli/docs/tutorial/"}},l={},c=[];function o(e){const n={code:"code",em:"em",li:"li",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Aplikasi didesain menggunakan DDD (",(0,r.jsx)(n.em,{children:"domain-driven design"}),") dan ",(0,r.jsx)(n.em,{children:"onion\narchitecture"}),". ",(0,r.jsx)(n.em,{children:"Onion architecture"})," adalah arsitektur yang memisahkan antara\nbusiness logic dengan teknologi yang digunakan. Dengan ",(0,r.jsx)(n.em,{children:"onion architecture"}),",\naplikasi akan lebih mudah diuji, dikembangkan, dan dipelihara."]}),"\n",(0,r.jsx)(n.p,{children:"Aplikasi kita dibagi menjadi beberapa layer, dimulai dari layer terdalam:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Layer ",(0,r.jsx)(n.strong,{children:"domain"}),". Namespace ",(0,r.jsx)(n.code,{children:"App\\Domain"}),". Terdiri dari entity, value object\ndan objek-objek pendukung, seperti collection, domain event, exception, dan\nlain-lain."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Layer ",(0,r.jsx)(n.strong,{children:"domain service"}),". Namespace ",(0,r.jsx)(n.code,{children:"App\\DomainService"}),". Terdiri dari\nrepository, event listener, dan service lain yang hanya memiliki dependency ke\nlayer domain."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Layer ",(0,r.jsx)(n.strong,{children:"application service"}),". Namespace ",(0,r.jsx)(n.code,{children:"App\\ApplicationService"}),". Terdiri\ndari application-level event listener, messenger handler, dan service\nsemacamnya."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Layer-layer luar, terdiri dari:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Layer ",(0,r.jsx)(n.strong,{children:"infrastructure"}),". Namespace ",(0,r.jsx)(n.code,{children:"App\\Infrastructure"}),". Terdiri dari\nimplementasi dari repository, event listener, dan service lain yang\nberinteraksi dengan teknologi eksternal."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Layer ",(0,r.jsx)(n.strong,{children:"front end"}),". Berkaitan dengan interaksi aplikasi dengan pengguna.\nTerdiri dari:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Layer ",(0,r.jsx)(n.strong,{children:"web front end"}),". Namespace ",(0,r.jsx)(n.code,{children:"App\\WebFrontEnd"}),". Terdiri dari\nweb controller, form, template, dan service lain yang berhubungan dengan\nweb."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Layer ",(0,r.jsx)(n.strong,{children:"API front end"}),". Namespace ",(0,r.jsx)(n.code,{children:"App\\ApiFrontEnd"}),". Terdiri dari\nAPI resource, API state, konfigurasi mapper, dan sebagainya."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Layer ",(0,r.jsx)(n.strong,{children:"console front end"}),". Namespace ",(0,r.jsx)(n.code,{children:"App\\Command"}),". Terdiri dari\nconsole command, dan service lain yang berhubungan."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Aturan dasarnya adalah:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Layer luar boleh mengakses layer dalam, tapi layer dalam tidak boleh\nmengakses layer di atasnya."}),"\n",(0,r.jsxs)(n.li,{children:["Layer dalam boleh membuat interface. Dan layer luar yang membuat\nimplementasinya. Konsep ini dinamakan ",(0,r.jsx)(n.em,{children:"dependency inversion principle"}),"."]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>d});var r=i(6540);const a={},s=r.createContext(a);function t(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);